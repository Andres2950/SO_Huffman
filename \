#ifndef HUFFMAN_H
#define HUFFMAN_H

#include <stdio.h>
#include <stdlib.h>
#define NUM_SYMBOLS 256


typedef struct Node{
  char ch;
  int freq;
  struct Node *left, *right, *next;
} Node;

typedef struct {
  Node *first;
  int size;
} LinkedList;


int* new_frequency_table();
void frequency_table_add_text(int *ft, char *text);
void frequency_table_print(int *ft);
void init_linked_list(LinkedList *list);
void linked_list_insert(LinkedList *list, Node *node);
void linked_list_insert_bulk(LinkedList *list, int *ft);
void linked_list_print(LinkedList *list);

void init_linked_list(LinkedList *list){
  list->first = 0;
  list->size = 0;
}

#ifndef HUFFMAN_C

void linked_list_insert(LinkedList *list, Node *node){
  Node *tmp;

  if(list->first = 0){
    list->first = node;
    list->size++;
  } else if(node->freq < list->first->freq){
    node->next = list->first;
    list->first = node;
    list->size++;
  } else {
    tmp = list->first;
    while(tmp->next && tmp->next->freq <= node->freq)
      tmp = tmp->next;
    node->next = tmp->next;
    tmp->next = node;
    list->size++;
  }
}

void linked_list_insert_bulk(LinkedList *list, int *ft){
  Node *new_node;
  for (int i = 0; i < NUM_SYMBOLS; ++i){
    if(ft[i] > 0){
      new_node = malloc(sizeof(Node));
      new_node->ch = i;
      new_node->freq = ft[i];
      new_node->left = 0;
      new_node->right = 0;
      new_node->next = 0;

      linked_list_insert(list, new_node);
    }
  }
}

void linked_list_print(LinkedList *list){
  Node *tmp = list->first;
  while(tmp){
    printf("\tCharacter: %c Frequency: %d\n", tmp->ch, tmp->freq);
    tmp = tmp->next;
  }
}


int* new_frequency_table(){
  int i;
  int *ft = malloc(4 * NUM_SYMBOLS);
  for (i = 0; i < NUM_SYMBOLS; ++i)
    ft[i] = 0;
  return ft;
}

void frequency_table_add_text(int *ft, char *text){
  for(int i = 0; text[i] != '\0'; ++i){
    ft[text[i]]++;
  }
}

void frequency_table_print(int *ft){
  for(int i = 0; i < NUM_SYMBOLS; ++i){
    if (ft[i] > 0)
      printf("\t%d = %d = %c\n", i, ft[i], i);
  }
}


#endif
#endif
